require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PasswordsController, type: :controller do
  let(:user) { create(:user) }

  let(:valid_attributes) { {new_password: 'Fred12!', new_password_confirm: 'Fred12!'} }

  describe "GET #new" do
    it "doesnt throw exceptions" do
      get :new, params: {}, session: {}
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Password" do
        post :create, params: {:email => user.email}, session: {}

        user.reload

        expect(user.reset_password_token).not_to be nil
        expect(user.reset_password_sent_at).not_to be nil
      end

      it "redirects to the created password" do
        post :create, params: {:email => user.email}, session: {}
        expect(response).to redirect_to(root_path)
      end
    end

    context "with invalid params" do
      it "re-renders the 'new' template" do
        post :create, params: {:email => 'bademail@abc.com'}, session: {}
        expect(response).to redirect_to(new_password_path)
      end
    end
  end

  describe "GET #edit" do
    it "doesnt throw exceptions" do
      user.update(reset_password_token: '123', reset_password_sent_at: Time.now)
      get :edit, params: {reset_password_token: '123'}, session: {}
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      it "sets a new Password" do
        user.update(reset_password_token: '123', reset_password_sent_at: Time.now)
        put :update, params: {new_password: '123456', new_password_confirmation: '123456', token: '123'}, session: {}
        user.reload
        expect(user.reset_password_token).to be nil
        expect(user.reset_password_sent_at).to be nil
      end
    end
  end
end
