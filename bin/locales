#!/usr/local/bin/perl
use strict;
use Getopt::Std;
use File::Find;
use YAML::XS qw/LoadFile/;

# Data.
my @dirs = qw[app spec lib];
my %definitions;
my %missing;
my %duplicate_translations;

# Options.
my %opt;
my $opt = 'htdDmM';
getopts($opt, \%opt);
sub help
{
    print <<EOH;
$0 -[$opt]
print stats about locale strings used in this app
  -h  print this help
  -t  list translations
  -d  list duplicate translations
  -m  list missing codes
  -D  ignore allowed duplicated
  -M  ignore allowed missing translations
examples
  $0 -dm   # quick check there are no duplicates or missing translations
  $0 -dD   # list duplicates, even allowed ones
  $0 -mM   # list missing translations, even allowed ones
  $0 -t    # list all translations
  $0       # just list the total number of translations
EOH
    exit 0;
}
&help() if $opt{h};

# Sanity check.
check_current_dir();

# Main program.
find(\&gather_definitions, "config/locales");
prune_duplicates();
find(\&gather_usages, @dirs);
list_missing() if $opt{m};
list_duplicates() if $opt{d};
list_translations() if $opt{t};
count_translations();

#
# Utilities.
#

# Check we're in a suitable working directory.
sub check_current_dir
{
    my @absent;
    foreach my $dir (@dirs, "config/locales")
    {
        push @absent, $dir unless -d $dir;
    }
    die sprintf("doesn't look like you're in an app directory (where %s: %s)\n", @absent == 1 ? 'is' : 'are', join(', ', @absent)) if @absent;
}

# Gather the definitions.
sub gather_definitions
{
    if (-f && /\.yml$/)
    {
        my $hash = LoadFile($_);
        &register_definitions($hash, $File::Find::name);
    }
}
sub register_definitions
{
    my ($hash, $dir) = @_;

    # A string to indicate the location of the definitions being registered.
    $dir =~ s/config\/locales\///;
    my @dir = split(/\//, $dir);
    pop @dir;
    $dir = join('/', @dir) || 'default';

    # Recursively register each definition in the hash.
    &register_definition($hash, $dir);
}
sub register_definition
{
    my ($data, $dir, @keys) = @_;

    if (ref $data eq 'HASH')
    {
        foreach my $key (keys(%{$data}))
        {
            &register_definition($data->{$key}, $dir, @keys, $key);
        }
    }
    else
    {
        shift @keys; # don't need 'en'
        my $keys = join('.', @keys);
        $definitions{$keys} = { tran => $data, dir => $dir, hits => 0 };
        push @{$duplicate_translations{$data}}, $keys;
    }
}
sub prune_duplicates
{
    # Remove non-duplicates.
    @{$duplicate_translations{$_}} == 1 && delete $duplicate_translations{$_} for keys %duplicate_translations;

    # Certain duplicates are allowed, so remove them.
    my %allow =
    (
        'Active'                    => ['active', 'player.status.active'],
        'Foreign'                   => ['player.foreign', 'player.status.foreign'],
        'Inactive'                  => ['inactive', 'player.status.inactive'],
        'Invalid email or password' => ['session.invalid_email', 'session.invalid_password'],
        'Name'                      => ['club.name', 'fee.name', 'player.name'],
        'Status'                    => ['player.status.status', 'shop.payment.status.status'],
        'Subscription'              => ['item.type.subscription', 'player.source.subscription'],
    );
    unless ($opt{D})
    {
        foreach my $trans (keys %allow)
        {
            if ($duplicate_translations{$trans})
            {
                my %dup; $dup{$_} = 1 for @{$allow{$trans}};
                my @old = @{$duplicate_translations{$trans}};
                my @new = grep !$dup{$_}, @old;
                if ((scalar(@old) - scalar(@new)) == scalar(keys %dup))
                {
                    if (scalar(@new) == 0)
                    {
                        delete $duplicate_translations{$trans};
                    }
                    else
                    {
                        $duplicate_translations{$trans} = [@new];
                    }
                }
            }
        }
    }
}

# List definitions.
sub list_translations
{
    my $max = 0; $max < length($_) && ($max = length($_)) for keys %definitions;
    foreach my $code (sort keys %definitions)
    {
        my $def = $definitions{$code};
        printf "%-${max}s %-16s %3d %s\n", $code, $def->{dir}, $def->{hits}, $def->{tran};
    }
}

# Gather the usages.
sub gather_usages
{
    if (-f && /\.(rb|haml|erb)$/)
    {
        die "can't open $Find::File::name" unless open FILE, $_;
        foreach my $line (<FILE>)
        {
            if ($line =~ /\bt\(["']([._a-z0-9]+)["'][),]/i)
            {
                my $code = $1;
                if ($definitions{$code})
                {
                    $definitions{$code}->{hits}++;
                }
                else
                {
                    $missing{$code}->{$File::Find::name} = 1 unless &missing_ok($code, $File::Find::name);
                }
            }
        }
        close FILE;
    }
}

# For some translations that appear to be missing there's a reason.
sub missing_ok
{
    my ($code, $file) = @_;

    return 0 if $opt{M};
    return 1 if $code eq 'not.here' && $file eq 'spec/models/translation_spec.rb'; # test for missing translation
    return 1 if $code eq 'item.n_items'; # pluralised
    return 0;
}

# List codes which result in the same translation.
sub list_duplicates
{
    printf "duplicate translations: %d\n", scalar(keys(%duplicate_translations));
    my $max = 0; $max < length($_) && ($max = length($_)) for keys %duplicate_translations;
    foreach my $trans (sort keys %duplicate_translations)
    {
        my @codes = sort @{$duplicate_translations{$trans}};
        printf "  %-${max}s %s\n", $trans, join(', ', @codes);
    }
}

# List used codes which don't appear to be used.
# Warning: this will include those using dynamic codes which are actually in use (e.g. t("cart.status.#{status}")).
sub list_missing
{
    printf "missing codes: %d\n", scalar(keys(%missing));
    my $max = 0; $max < length($_) && ($max = length($_)) for keys %missing;
    foreach my $code (sort keys %missing)
    {
        my @files = sort keys %{$missing{$code}};
        printf "  %-${max}s %s\n", $code, join(', ', @files);
    }
}

# Output a count of definitions.
sub count_translations
{
    printf "translations: %d\n", scalar(keys %definitions);
}
