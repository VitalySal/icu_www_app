= render "titles", text: "help.overview"

%p
  This is an introduction to the ICU websites: how they work, what's involved, how to make changes.
  It's primarily intended as a resource for ICU webmasters.
  The websites have evolved since the first one appeared in 2004 and will probably continue to do so in the future.
  Future webmasters are encouraged to keep this document up to date. Revision history:
%ul
  %li January 2015: created by MO (still in progress).
%hr
%ul
  %li
    = render "link", topic: "intro.intro"
    %ul
      - %w[roles components dev_test_deploy test_commit_push_deploy logging_into_server accounts resources].each do |topic|
        = render "item", topic: "intro.#{topic}"
  %li
    = render "link", topic: "tasks.tasks"
    %ul
      - %w[maintenance_mode check_ticket sql_query create_new_help_page create_new_payment_type seasonal web].each do |topic|
        = render "item", topic: "tasks.#{topic}"
  %li
    = render "link", topic: "appendix.appendix"
    %ul
      - %w[apache backups bootstrap bundler can_can capistrano centos ftp gems github google haml mailgun mysql passenger rails rake redis register365 rspec ruby secrets ssl stripe webrick whenever].each do |topic|
        = render "item", topic: "appendix.#{topic}"

= render "header", topic: "intro.intro"
%p
  The ICU currently runs two web sites:
%ol
  %li
    A
    %a{href: "http://www.icu.ie", target: "internal"} www
    site mainly for news, articles, general information and online payments.
  %li
    A
    %a{href: "http://ratings.icu.ie", target: "internal"} ratings
    site for the ICU's chess rating system.

= render "header", topic: "intro.roles"
%p
  These websites are managed by a team, one of which is the webmaster. Some examples of roles other than webmaster on the main site are:
%ul
  %li Editor: manages news items, articles, images, games, club listings, calendar entries, etc.
  %li Treasurer: manages subscription and other fees, can issue refunds and view shopping carts.
  %li Translator: manages Irish language translations.
%p And on the ratings site:
%ul
  %li Reporter: loads tournament reports for rating.
  %li Rating Officer: rates tournaments, publishes rating lists.
%p
  When anyone with a role logs in, certain pages become available through which they can update part of one of two databases (depending what the role is).
  For example:
  %ul
    %li
      On the main site, Editors can edit news items and articles
      = precede("(") do
        = succeed(").") do
          %a{href: "/help/articles", target: "internal"} more details
    %li
      On the ratings site, Reporters can upload tournament reports
      = precede("(") do
        = succeed(").") do
          %a{href: "http://ratings.icu.ie/articles/6", target: "internal"} more details
    %li On both sites, Admins can grant roles to (or remove roles from) other users.
%p
  Further details of tasks that users with roles can accomplish via the websites can be found in the main
  = link_to t("help.help"), help_index_path, target: "internal"
  page on this site and in the
  %a{href: "http://ratings.icu.ie/articles", target: "external"} articles
  on the <em>ratings</em> site.
%p
  The webmaster's role (Admin) is the most powerful one and it enables the webmaster to do anything other users can do (and more).
  However, the day-to-day content management of the sites (news, articles, ratings, etc) is not the webmaster's top priority.
  Their chief responsibilities are:
%ul
  %li Managing the technical side of things (server, application code, databases, external services, etc.) as described in further detail on this help page.
  %li Ensuring each member of the team is capable of managing their particular responsibilities.
  %li Dealing with queries from website users and the executive.
  %li Maintaining a log of all upgrades and configuration changes on the production server.
%p
  In practice, as well as looking after the technical side of things, webmasters act as cover for the rest of the team
  and can expect to perform a little bit of all the other roles, depending on how assiduous other team members are.

= render "header", topic: "intro.components"
%p
  The main technical sub-systems supporting the two websites,
  all of which the webmaster is responsible for maintaining, are as follows:
%ul
  %li
    A rented machine permanently connected to the internet (see
    = succeed("),") do
      = render "link", topic: "appendix.centos"
    with a web server (see
    = succeed(")") do
      = render "link", topic: "appendix.apache"
    and an application server (see
    = succeed(").") do
      = render "link", topic: "appendix.passenger"
  %li
    Two SQL databases, one for each website (see
    = succeed(").") do
      = render "link", topic: "appendix.mysql"
  %li
    Two web applications, one for each website (see
    = succeed(").") do
      = render "link", topic: "appendix.rails"
  %li
    Several modular software components for specialized tasks, mostly for the ratings site (see
    = succeed(").") do
      = render "link", topic: "appendix.gems"
  %li
    An account with a registrar to maintain the ICU domain (icu.ie) and it's DNS records (see
    = succeed(").") do
      = render "link", topic: "appendix.register365"
  %li
    An account with an e-commerce business to process online card payments (see
    = succeed(").") do
      = render "link", topic: "appendix.stripe"
  %li
    An account with an email provider for delivery and relaying (see
    = succeed(").") do
      = render "link", topic: "appendix.mailgun"
  %li
    An account with a repository hosting service for source code management (see
    = succeed(").") do
      = render "link", topic: "appendix.github"
  %li
    Data files containing sensitive information (passwords, API keys, cryptographic data, etc) which are never committed to the repository (see
    = succeed(").") do
      = render "link", topic: "appendix.secrets"
  %li
    An FTP service mainly for tournament controllers (see
    = succeed(").") do
      = render "link", topic: "appendix.ftp"
  %li
    A system for scheduling regular jobs (see
    = succeed(").") do
      = render "link", topic: "appendix.whenever"
  %li
    A no-SQL database for fast retrieval of Irish language translations (see
    = succeed(").") do
      = render "link", topic: "appendix.redis"

= render "header", topic: "intro.dev_test_deploy"
%p
  The local environment is what the webmaster has on their local machine to develop, test and deploy new code to the production server.
  New webmasters should spend some time setting it up correctly as it's essential.
  It's used to:
%ul
  %li develop new functionality or fix bugs,
  %li write new automated tests,
  %li
    run automated tests to prove new functionality and make sure old functionally hasn't regressed (see
    = succeed("),") do
      = render "link", topic: "appendix.rspec"
  %li
    manually check functionality on a locally running web server (see
    = succeed("),") do
      = render "link", topic: "appendix.webrick"
  %li
    commit changes to a local repository and then push it to the master repository (see
    = succeed("),") do
      = render "link", topic: "appendix.github"
  %li
    deploy new code to the live server (see
    = succeed(").") do
      = render "link", topic: "appendix.capistrano"
%p
  Following are the steps to setup the environment for the first time.
  It's not required to use the same OS (Centos) as the live server,
  any Unix-like OS should be fine (e.g. MacOS or any flavour of Linux).
  You should probably avoid Windows.
%p
  You can put the ICU code wherever you like but for the sake of an example
  (which will be used throughout this document), we'll assume it all goes into
  = succeed(".") do
    %stong ~/Projects/
%ul
  %li
    Install git and clone all the master repositories (2 web applications and 4 gems) from Github into
    %stong ~/Projects/
    (see
    = succeed(").") do
      = render "link", topic: "appendix.github"
  %li
    Install and start MySQL and then create the 4 test and development databases required.
    Fill the development databases with data copied from the production server but leave the test databases empty (see
    See
    = succeed(").") do
      = render "link", topic: "appendix.mysql"
    Whatever connection parameters you choose (username, password), copy them to
    %strong config/database.yml
    (see
    = succeed(").") do
      = render "link", topic: "appendix.secrets"
  %li
    Install
    = render "link", topic: "appendix.redis"
    and make sure it's responding on the standard port (6379).
  %li
    Install the same version of Ruby that is currently in use on the server
    (look at the file ~/Projects/icu_www_app/.ruby-version to find out what that is).
    It's convenient to be able to switch Ruby versions in the local environment,
    so consider installing
    %em rbenv
    or
    %em rvm
    (see
    = succeed(").") do
      = render "link", topic: "appendix.ruby"
  %li
    Install
    = render "link", topic: "appendix.bundler"
    and issue the following commands:
    - cmd = []
    - cmd << '$ cd ~/Projects/icu_www_app/'
    - cmd << '$ bundle install'
    - cmd << '$ cd ~/Projects/icu_ratings_app/'
    - cmd << '$ bundle install'
    %pre~ cmd.join("\n")
    which will install all the other
    = render "link", topic: "appendix.gems"
    required by the applications.
  %li
    Follow the instructions in
    = render "link", topic: "appendix.secrets"
    for setting up local versions of
    %strong config/secrets.yml
    for both applications.
  %li
    Issue the following commands (see
    = succeed("):") do
      = render "link", topic: "appendix.webrick"
    - cmd = []
    - cmd << '$ cd ~/Projects/icu_www_app/'
    - cmd << '$ bin/rails s'
    %pre~ cmd.join("\n")
    You should now be able to see a development version of the main site at:
    = succeed(".") do
      %em http://127.0.0.1:3000
    Type Control-C to quit.
  %li
    Similarly, for the ratings site run the following commands (see:
    - cmd = []
    - cmd << '$ cd ~/Projects/icu_ratings_app/'
    - cmd << '$ bin/rails s'
    %pre~ cmd.join("\n")
    and visit the same address to see the development version of the ratings site.
  %li
    The final check of whether the environment is correctly setup is to run all the automated tests:
    - cmd = []
    - cmd << '$ cd ~/Projects/icu_www_app/'
    - cmd << '$ bin/rake # this will take a few minutes'
    - cmd << '$ cd ~/Projects/icu_ratings_app/'
    - cmd << '$ bin/rake # this will also take a few minutes'
    %pre~ cmd.join("\n")
    If all these tests should pass (or nearly all, see
    = succeed("),") do
      = render "link", topic: "appendix.rspec"
    the environment is working correctly.

= render "header", topic: "intro.test_commit_push_deploy"
%p
  The steps to deploy a new release to the live server are always the same and rely on
  = succeed(",") do
    = render "link", topic: "appendix.rspec"
  = render "link", topic: "appendix.github"
  and
  = succeed(".") do
    = render "link", topic: "appendix.capistrano"
  Here are the commands to run:
- cmd = []
- cmd << '$ bin/rake                                       # runs entire test suite to check nothing has regressed'
- cmd << '$ git add .                                      # stages all changes'
- cmd << '$ git commit -m "Comment describing the change"  # commits to the local repository'
- cmd << '$ git push                                       # pushes to the master repository'
- cmd << '$ cap production deploy                          # deploys to the production server'
%pre~ cmd.join("\n")
%p If anything goes wrong with the deployment, you can roll it back to the previous release with:
%pre bin/cap production deploy:rollback
%p
  The above steps require SSH keys to be registered with both Github and the production server (see
  = succeed(").") do
    = render "link", topic: "intro.accounts"

= render "header", topic: "intro.logging_into_server"
%p
  Most changes the webmaster performs are done either via the web site (to update the database) or via
  = render "link", topic: "intro.dev_test_deploy"
  (to update the applications).
  However, there are some things for which logging into the production server is required (see
  = succeed(").") do
    = render "link", topic: "appendix.centos"
  Here are a few examples:
%ul
  %li
    Change web server configuration files (see
    = succeed(").") do
      = render "link", topic: "appendix.apache"
  %li
    Examine web server (see
    = succeed(")") do
      = render "link", topic: "appendix.apache"
    or application log files.
  %li
    Update system libraries (see
    = succeed(").") do
      = render "link", topic: "appendix.centos"
  %li
    Install the latest version of
    = render "link", topic: "appendix.ruby"
    and/or
    = succeed(".") do
      = render "link", topic: "appendix.passenger"
  %li
    Change the password for the
    = render "link", topic: "appendix.ftp"
    user.
%p
  The website-related logs files are:
  %ul
    %li <b>/var/log/http/www/</b>: Apache log files for the <em>www</em> site,
    %li <b>/var/log/http/ratings/</b>: Apache log files for the <em>ratings</em> site,
    %li <b>/var/apps/www/log/production.log</b>: application log file for the <em>www</em> site,
    %li <b>/var/apps/ratings/log/production.log</b>: application log file for the <em>ratings</em> site.
%p
  Other useful directories and files on the live server to know about:
  %ul
    %li <b>/etc/httpd/conf.d/vhost.conf</b>: Apache configuration for both sites,
    %li <b>/var/apps/www/current</b>: root directory for the current release of the <em>www</em> application,
    %li <b>/var/apps/ratings/current</b>: root directory for the current release of the <em>ratings</em> application,
    %li <b>/etc/logrotate.d/</b>: log file rotation configuration,
    %li
      <b>~/bak/</b>: backups kept here prior to transfer offsite (see
      = succeed(").") do
        = render "link", topic: "appendix.backups"

= render "header", topic: "intro.accounts"
%p
  This is a list of the all the services (both our own and those of external providers)
  which require access credentials of one kind or another (username/password or API keys).
  The actual credentials are kept in an offline file by the webmaster
  and copied to a small number of trusted individuals for backup.
  Some of the credentials are also in <em>secrets.yml</em> or <em>database.yml</em> on the production server (see
  = succeed(").") do
    = render "link", topic: "appendix.secrets"
%ul
  %li
    The <em>root</em> user on the production ICU server:
    %ul
      %li Password.
      %li Remote logins disabled (if you need <em>root</em>, login as the ordinary user and switch).
  %li
    The ordinary user on the production ICU server:
    %ul
      %li Username and password.
      %li Remote logins allowed (this is the normal way to login). Setup SSH keys for convenience.
  %li
    Read-only access to the <em>www_production</em> database:
    %ul
      %li Username and password.
      %li Remote access allowed.
  %li
    Read-write access to the <em>www_production</em> database:
    %ul
      %li Username and password.
      %li Remote access disabled.
      %li These go in <em>database.yml</em> on the production server.
  %li
    Read-only access to the <em>ratings_production</em> database:
    %ul
      %li Username and password.
      %li Remote access allowed.
  %li
    Read-write access to the <em>ratings_production</em> database:
    %ul
      %li Username and password.
      %li Remote access disabled.
      %li These go in <em>database.yml</em> on the production server.
  %li
    The
    = render "link", topic: "appendix.ftp"
    user on the production ICU server:
    %ul
      %li Username and password.
  %li
    Our
    = render "link", topic: "appendix.github"
    account:
    %ul
      %li
        Email and password to login at
        = succeed(".") do
          %a{href: "https://github.com/login", target: "external"} github.com/login
      %li SSH keys (one for each webmaster/developer) registered with Github to enable push access to the repository.
  %li
    Our Linode account (see
    = succeed("):") do
      = render "link", topic: "appendix.centos"
    %ul
      %li
        Email and password to login at
        = succeed(".") do
          %a{href: "https://manager.linode.com/", target: "external"} manager.linode.com
  %li
    Our
    = render "link", topic: "appendix.mailgun"
    account:
    %ul
      %li
        Email and password to login at
        = succeed(".") do
          %a{href: "https://mailgun.com/sessions/new", target: "external"} mailgun.com/sessions/new
      %li A password, a secret key and a public key for <em>secrets.yml</em> on the production server.
  %li
    Our
    = render "link", topic: "appendix.register365"
    account:
    %ul
      %li
        Email and password to login at
        = succeed(".") do
          %a{href: "https://www.register365.com/login", target: "external"} www.register365.com/login
  %li
    Our
    = render "link", topic: "appendix.stripe"
    account:
    %ul
      %li
        Email and password to login at
        = succeed(".") do
          %a{href: "https://dashboard.stripe.com/login", target: "external"} dashboard.stripe.com/login
      %li A pair of API keys for live transactions which go in <em>secrets.yml</em> on the production server.
      %li A pair of API keys for test transactions which go in <em>secrets.yml</em> in the webmaster's local environment.
  %li
    A
    = render "link", topic: "appendix.google"
    API key for <em>secrets.yml</em> (the same key can be used for the production server and local environment).

= render "header", topic: "intro.resources"
%p Other resources helpful to the webmaster are:
%ul
  %li
    A detailed log of all system software updates and configuration changes for the current production server
    (available from MO as a single <em>Evernote</em> page).
  %li
    A
    %a{href: "https://github.com/sanichi/icu_ratings_app/wiki/Setup", target: "external"} description
    of how the current production server (2014-) was built.
  %li
    A
    %a{href: "https://github.com/sanichi/icu_www_app/wiki/Setup-a-Server", target: "external"} description
    of how the previous production server (2011-2014) was built.

= render "header", topic: "tasks.tasks"

%p TODO

= render "header", topic: "tasks.maintenance_mode"

%p TODO

= render "header", topic: "tasks.check_ticket"
%p
  Given a season ticket
  = precede("(") do
    = succeed("),") do
      %a{href: "/help/accounts", target: "internal"} more details here
  say for example, <em>2tDdxD</em>, then you can check it's validity by starting a console for the <em>www</em> web application:
  - cmd = []
  - cmd << '$ cd ~/Projects/icu_www_app/'
  - cmd << '$ bin/rails c'
  - cmd << '>> st = SeasonTicket.new("2tDdxD")'
  - cmd << '>> st.expires_on'
  - cmd << '=> "2010-12-31"'
  - cmd << '>> st.icu_id'
  - cmd << '=> "1234"'
  %pre~ cmd.join("\n")
  %p
    In this particular example the ticket is valid and belongs to ICU ID 1234 but expired at the end of 2010.
    If you try the same thing with an invalid ticket you'll get some kind of error, for example:
  - cmd = []
  - cmd << '>> st = SeasonTicket.new("rubbish")'
  - cmd << '>> st.error'
  - cmd << '=> "invalid season ticket (bad characters)"'
  %pre~ cmd.join("\n")
  %p
    Note that for proper decoding of season tickets in the local environment, the same cryptographic entries configured
    in the production application's <em>secrets.yml</em> file are required in the local version of that file (see
    = succeed(").") do
      = render "link", topic: "appendix.secrets"
  %p
    If you don't have the right crypto entires in <em>secrets.yml</em>, and alternative would be to log into the live server
    and perform the operation there, but remember to start the console in the <em>production</em> environment because the
    default is <em>development</em> (which the live server lacks):
  - cmd = []
  - cmd << '$ cd /var/apps/www/current'
  - cmd << '$ RAILS_ENV=production bin/rails c'
  %pre~ cmd.join("\n")

= render "header", topic: "tasks.sql_query"

%p TODO

= render "header", topic: "tasks.create_new_help_page"
%p
  The page you're currently reading is an example of a help page.
  Unlike articles and news items, help pages are not stored in the database and can't be changed by editors.
  Instead, they're part of the web application code and need the webmaster to create and edit them.
  To create a new help page do the following on your development machine:
%ul
  %li
    think of a single word or short snake-case name for the new page and add it to the
    %em HELP_PAGES
    array in
    = succeed(",") do
      %strong app/models/global.rb
  %li
    map that short name to the full title of your new help page in the file
    = succeed(",") do
      %strong config/locales/help/en.yml
  %li
    add a link to the new page in the help index:
    = succeed(",") do
      %strong app/views/help/index.html.haml
  %li
    create a new page view using the same short name you chose earlier:
    <b>app/views/help/</b><em>short_name</em><b>.html.haml</b>,
  %li
    in the same way as other help pages in
    = succeed(",") do
      %b app/views/help/
    start the new page with two titles (one for the browser tab, one for the page) and a horizontal rule,
  %li
    insert the help text, divided into sections with headers and (for large articles, such as this one) a table of contents,
  %li
    view and manually check your work in a browser (see
    = succeed("),") do
      = render "link", topic: "appendix.webrick"
  %li
    run the following test which is focused solely on the help pages:
    %pre $ bin/rspec spec/features/help_spec.rb
  %li
    when you're finished:
    = succeed(".") do
      = render "link", topic: "intro.test_commit_push_deploy"

= render "header", topic: "tasks.create_new_payment_type"

%p TODO

= render "header", topic: "tasks.seasonal"

%p
  = succeed(":") do
    %b After the Irish Championships
  Update the right hand panel of the home page of the <em>www</em> site with the names and photos of the new mens and womens champions.
  The file to edit is:
  = succeed(".") do
    %em app/views/layouts/_features.html.haml
%p
  = succeed(":") do
    %b July
  Make sure the Treasurer has rolled over the current set of subscriptions ready to go on sale on the 1st August (see
  = succeed(").") do
    = link_to t("help.rollover_subs"), help_rollover_subs_path
%p
  = succeed(":") do
    %b July
  Renew the security certificate for <em>www.icu.ie</em> so that <em>https</em> keeps working for credit card payments (see
  = succeed(").") do
    = render "link", topic: "appendix.ssl"
%p
  = succeed(":") do
    %b December
  Make sure the annual fee for the <em>icu.ie</em> domain is paid. It should be automatic as long as a valid credit card is registered with the account (see
  = succeed(").") do
    = render "link", topic: "appendix.register365"

= render "header", topic: "tasks.web"

%p
  When the webmaster (the user with the
  = t("user.role.admin")
  role) logs into either website, extra buttons and forms become available through which various updates can be performed on the databases.
  Help for some common tasks the webmaster can accomplish this way is available under the
  = t("user.role.admin")
  heading on the
  = succeed(".") do
    = link_to "main help page", help_index_path

= render "header", topic: "appendix.appendix"

= render "header", topic: "appendix.apache"

%p TODO

= render "header", topic: "appendix.backups"

%p TODO

= render "header", topic: "appendix.bootstrap"

%p TODO

= render "header", topic: "appendix.bundler"

%p TODO

= render "header", topic: "appendix.can_can"

%p TODO

= render "header", topic: "appendix.capistrano"

%p TODO

= render "header", topic: "appendix.centos"

%p TODO

= render "header", topic: "appendix.ftp"

%p TODO

= render "header", topic: "appendix.gems"

%p TODO

= render "header", topic: "appendix.github"
%p
  There are public Github repositories for each of the two web applications:
%ul
  %li
    %a{href: "https://github.com/sanichi/icu_www_app", target: "external"} icu_www_app
  %li
    %a{href: "https://github.com/sanichi/icu_ratings_app", target: "external"} icu_ratings_app
%p
  Plus 4 more for the
  = succeed(":") do
    = render "link", topic: "appendix.gems"
%ul
  %li
    %a{href: "https://github.com/sanichi/icu_ratings", target: "external"} icu_ratings
  %li
    %a{href: "https://github.com/sanichi/icu_tournament", target: "external"} icu_tournament
  %li
    %a{href: "https://github.com/sanichi/icu_name", target: "external"} icu_name
  %li
    %a{href: "https://github.com/sanichi/icu_utils", target: "external"} icu_utils
%p
  As described in
  = succeed(",") do
    = render "link", topic: "intro.test_commit_push_deploy"
  the webmaster commits changes to a local git repository and
  then pushes them to one of the master repositories listed above.
%p Git and Github resources:
%ul
  %li
    %a{href: "http://git-scm.com/doc", target: "external"} Git Documentation
  %li
    %a{href: "https://help.github.com/", target: "external"} Github Help
  %li
    %a{href: "http://www.git-tower.com/learn/videos", target: "external"} Git Tower Video Course

= render "header", topic: "appendix.google"
%p
  %a{href: "https://google-developers.appspot.com/chart/", target: "external"} Google Charts
  for rating graphs and
  %a{href: "https://google-developers.appspot.com/maps/", target: "external"} Google Maps
  for club and event maps on the main site. The latter requires an API key which goes in
  %strong config/secrets.yaml
  (see
  = succeed(").") do
    = render "link", topic: "appendix.secrets"

= render "header", topic: "appendix.haml"

%p TODO

= render "header", topic: "appendix.mailgun"

%p TODO

= render "header", topic: "appendix.mysql"
%p
  There are two production MySQL databases on the live server, one for each web application:
%ul
  %li www_production
  %li ratings_production
%p
  Locally, each of these has a development and test counterpart (see
  = succeed("):") do
    = render "link", topic: "intro.dev_test_deploy"
%ul
  %li www_development
  %li www_test
  %li ratings_development
  %li ratings_test
%p
  The test databases should be empty (test data is loaded automatically when tests run).
  The development databases should be loaded with recent copies of the production databases.

= render "header", topic: "appendix.passenger"

%p TODO

= render "header", topic: "appendix.rails"

%p TODO

= render "header", topic: "appendix.rake"

%p TODO

= render "header", topic: "appendix.redis"

%p TODO

= render "header", topic: "appendix.register365"

%p TODO

= render "header", topic: "appendix.rspec"

%p TODO

%p Capybara, FactoryGirl, Faker, Selenium.

= render "header", topic: "appendix.ruby"

%p TODO

= render "header", topic: "appendix.secrets"
%p
  Each web application has a pair of files that are used to store sensitive information such as
  API keys, database connection parameters, cryptographic data and passwords. The two files are:
%ul
  %li
    %strong config/database.yml
  %li
    %strong config/secrets.yml
%p
  These files are
  %strong NEVER COMMITED TO THE REPOSITORY
  because anyone can view our Github data. For this reason, the above two files are included in
  %strong .gitignore
  for both web apps.
%p
  When setting up a development and test environment, separate versions of these files
  (different to those on the live server) are required.
  Sample files showing what's required are available in the repository in
  = succeed(",") do
    %strong config/examples/
  but they contain dummy data.
  Examples of data that will differ between live site and local environment are:
%ul
  %li
    the connection parameters to our payment processor - the local versions should be for testing only (see
    = succeed("),") do
      = render "link", topic: "appendix.stripe"
  %li
    database connection parameters will refer to databases running the local machine, not the live server (see
    = succeed(").") do
      = render "link", topic: "appendix.mysql"
%p
  A few things can remain the same, such as the API key for Google Maps (see
  = succeed(").") do
    = render "link", topic: "appendix.google"
%p
  See also
  = succeed(".") do
    = render "link", topic: "intro.accounts"

= render "header", topic: "appendix.stripe"

%p TODO

= render "header", topic: "appendix.ssl"

%p
  To enable secure communication between the user's browser and the ICU server for credit card purchases,
  the ICU has purchased an SSL (also known as TLS) certificate for the <em>www.icu.ie</em> domain.
  It only lasts a year and so must be renewed. The first one purchased (from
  = succeed(")") do
    %a{href: "https://www.123-reg.co.uk/", target: "external"} 123-reg
  cost £10 and
  = Date.today >= Date.new(2015, 8, 4) ? "expired" : "expires"
  on 4th August 2015, so the right time to renew is July each year (see
  = succeed(").") do
    = render "link", topic: "tasks.seasonal"
%p Notes:
%ul
  %li The certificate files are kept in <b>/etc/httpd/ssl/</b>.
  %li
    There is a separate configuration file for the SSL/TLS port, <b>/etc/httpd/conf.d/ssl.conf</b>,
    and separate log files in <b>/var/log/httpd/ssl/</b> (see
    = succeed(").") do
      = render "link", topic: "appendix.apache"
  %li A secure connection is also used for logging into the <em>www</em> site.
  %li The certificate doesn't work for <em>ratings.icu.ie</em>, so logging in there is not protected.
  %li The certificate also doesn't work for <em>https://icu.ie</em>, so that URL is redirected to <em>https://www.icu.ie</em>.

= render "header", topic: "appendix.webrick"

%p TODO

= render "header", topic: "appendix.whenever"

%p TODO

